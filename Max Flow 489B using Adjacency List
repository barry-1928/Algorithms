#include<bits/stdc++.h>
using namespace std;

int n,m;
vector<int> h[202];
vector<vector<int>> r(202,vector<int>(202));
vector<int> parent(202);

bool bfs()
{
    int s = 0;
    queue<int> q;
    q.push(0);
    int f,i,k;
    //cout<<"BFS "<<endl;
    vector<bool> visited(m+n+2,false);
    while(!q.empty())
    {
        f = q.front();
        
        vector<int> ::iterator it = h[f].begin();
        //cout<<f<<" "<<h[f].size()<<endl;
        for(i=0;i<h[f].size();i++)
        {
            k = h[f][i];
            //cout<<f<<" "<<k<<endl;
            if(visited[k])
            {
                //cout<<f<<" "<<k<<endl;
                //cout<<i<<endl;
                continue;
            }
            //cout<<front<<" "<<*it<<endl;
            //cout<<f<<" "<<k<<endl;
            if(!visited[k] && r[f][k] > 0)
            {
                //cout<<front<<" "<<*it<<" "<<r[front][*it]<<endl;
                visited[k] = true;
                parent[k] = f;
                q.push(k);
            }
            
        }
        //cout<<i<<endl;
        q.pop();
    }
    return visited[m+n+1];
}
int ford_fulkerson()
{
    int s = 0,max_flow = 0;
    while(bfs())
    {
        int v = m+n+1;
        int flow = INT_MAX;
        while(v!=s)
        {
            flow = min(flow,r[parent[v]][v]);
            v = parent[v];
        }
        max_flow+=flow;
        v = m+n+1;
        while(v!=s)
        {
            r[parent[v]][v]-=flow;
            r[v][parent[v]]+=flow;
            v = parent[v];
        }
    }
    return max_flow;
}

int main()
{
    int t,i,j;
    cin>>n;
    vector<int> b(n+1);
    for(i=1;i<=n;i++)
    {
        cin>>b[i];
    }
    cin>>m;
    vector<int> g(m+1);
    for(i=1;i<=m;i++)
    {
        cin>>g[i];
    }
    
    //make_graph
    // source: 0, target: m+n+1
    //join source to boys
     
    for(i=1;i<=n;i++)
    {
        h[0].push_back(i);
        r[0][i] = 1;
        r[i][0] = 0;
    }
    
    //join girls to target
    for(i=1;i<=m;i++)
    {
        h[n+i].push_back(m+n+1);
        r[n+i][m+n+1] = 1;
        r[m+n+1][n+i] = 0;
    }
    
    //join boys to girls
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=m;j++)
        {
            if(abs(b[i]-g[j]) <= 1)
            {
                h[i].push_back(n+j);
                h[n+j].push_back(i);
                r[i][n+j] = 1;
                r[n+j][i] = 0;
            }
        }
    }
    
    /*for(i=0;i<m+n+2;i++)
    {
        //cout<<i<<": ";
        for(j=0;j<h[i].size();j++)
        {
            cout<<i<<": "<<h[i][j]<<" "<<r[i][h[i][j]]<<endl;
        }
        cout<<endl;
    }*/
    
    cout<<ford_fulkerson();
    return 0;
}
