#include<bits/stdc++.h>
using namespace std;

class point
{
	public:
		int x, y;
};

vector<point> points;
int n;
point h;

int t1 = -1;
int find(point s, point t)
{
	int x1 = t.x - s.x;
	int y1 = t.y - s.y;
	int x2 = h.x - s.x;
	int y2 = h.y - s.y;
	
	if((x1*y2 - x2*y1) > 0) // h to left of line st i.e outside if clockwise, inside if anticlockwise
	{
	    return 1;
	}
	else if((x1*y2 - x2*y1) == 0)
  {
      t1 = 1;
      return 0;
  }
	else // h to right of line st i.e inside if clockwise, outside if anticlockwise
	{
		return 2;
	}
}
bool find_if_inside()
{
    int i;
	//assuming points of polygon are given in clockwise order or anticlockwise order
	bool a = true;
	bool o = false;
	
	for(i=0;i<n;i++)
	{
		int k = find(points[i],points[(i+1)%n]);
		if(k == 1)
		{
		    a = a & 1;
		    o = o | 1;
		}
		else if(k == 2)
		{
		    a = a & 0;
		    o = o | 0;
		}
	}
	
	if(a == 0 && o == 0) //inside in case of clockwise
	{
		return true;
	}
	if(a == 1 && o == 1) //inside in case of anticlockwise
	{
		return true;
	}
	return false;
}
int main()
{
	cin>>n;
	int i;
	points.resize(n);
	for(i=0;i<n;i++)
	{
		cin>>points[i].x>>points[i].y;
	}
	
	cin>>h.x>>h.y;
	bool x = find_if_inside();
	if(t1 == 1)
	{
	    cout<<"On the polygon\n";
	    t1 = -1;
	    return 0;
	}
	if(x == true)
	{
		cout<<"Inside\n";
	}
	else
	{
		cout<<"Outside\n";
	}
	return 0;
}
