#include<bits/stdc++.h>
using namespace std;

int main()
{
    int t,n,i,j;
    cin>>t;
    while(t--)
    {
        cin>>n;
        vector<int> input(n);
        vector<int> h(n);
        vector<int> parent(n); //follow the parent pointers to reach the first element of the longest subsequence
        for(i=0;i<n;i++)
        {
            cin>>input[i];
            parent[i] = i;
        }
        
        // Here we find the increasing subsequence ending at index i. If input[i] is greater than some input[j](0<=j<i),
        // then the longest increasing subsequence ending at index i is the max of its old value and the new value
        // obtained by adding 1 to h[j],which is computed earlier to i(as j<i).
        
        for(i=0;i<n;i++)
        {
            h[i] = 1; //as a single number is an increasing subsequence of length 1: Base Condition
        }
        
        int max1 = 1, pos,p;
        
        //pos stores the position of the previous element of each index i for the longest subsequence ending at index i
        
        for(i=1;i<n;i++)
        {
            pos = i;
            for(j=0;j<i;j++)
            {
                if(input[i] >= input[j] && h[i] < h[j]+1)
                {
                    h[i] = max(h[i],h[j]+1);
                    pos = j; //
                    if(max1 < h[i])
                    {
                        p = i; //stores the largest index for which the max is found(longest subsequence's last index at each stage)
                        max1 = h[i];
                    }
                }
            }
            parent[i] = pos;
        }
        cout<<max1<<endl;
        stack<int> st;
        if(max1 == 1)
        {
            cout<<input[0]<<endl;
        }
        else 
        {while(max1!=-1 && parent[p]!=p)
        {
            st.push(input[p]);
            //cout<<p<<endl;
            p = parent[p];
            if(p==parent[p])
                st.push(input[p]);
        }
        while(!st.empty())
        {
            cout<<st.top()<<" ";
            st.pop();
        }
        cout<<endl;
        }
    }
    return 0;
}
